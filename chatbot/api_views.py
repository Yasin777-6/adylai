from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from django.shortcuts import get_object_or_404
from django.conf import settings
import json
import requests
import uuid
from datetime import datetime
from lawyers.models import Lawyer
from leads.models import Lead
from .models import ChatSession, ChatMessage


@method_decorator(csrf_exempt, name='dispatch')
class StartChatAPIView(View):
    """Initialize a new chat session with a lawyer's AI assistant"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            lawyer_slug = data.get('lawyer_slug')
            visitor_name = data.get('visitor_name', 'Anonymous')
            
            # Get lawyer
            lawyer = get_object_or_404(Lawyer, domain_slug=lawyer_slug)
            
            # Create chat session
            session = ChatSession.objects.create(
                lawyer=lawyer,
                visitor_name=visitor_name,
                visitor_ip=request.META.get('REMOTE_ADDR'),
                status='active',
                language='ru',  # Default to Russian
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                referrer=request.META.get('HTTP_REFERER', '')
            )
            
            # Welcome message
            welcome_message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞ {lawyer.user.get_full_name()}. 

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
üî∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
üî∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö 
üî∏ –ó–∞–ø–∏—Å—å—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å —é—Ä–∏—Å—Ç–æ–º
üî∏ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –≤–∞—à–µ–≥–æ –¥–µ–ª–∞

–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
            
            # Save welcome message
            ChatMessage.objects.create(
                session=session,
                message_type='assistant',
                content=welcome_message,
                ai_model='system'
            )
            
            return JsonResponse({
                'success': True,
                'session_id': session.session_id,
                'message': welcome_message,
                'lawyer_name': lawyer.user.get_full_name()
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)


@method_decorator(csrf_exempt, name='dispatch')
class SendMessageAPIView(View):
    """Send message to AI and get response"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            session_id = data.get('session_id')
            user_message = data.get('message', '').strip()
            
            if not user_message:
                return JsonResponse({'success': False, 'error': 'Message is required'})
            
            # Get chat session
            session = get_object_or_404(ChatSession, session_id=session_id)
            lawyer = session.lawyer
            
            # Save user message
            user_chat_message = ChatMessage.objects.create(
                session=session,
                message_type='user',
                content=user_message
            )
            
            # Enhanced keyword detection for different types of requests
            explicit_appointment_keywords = ['–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É', '–ø—Ä–∏–π—Ç–∏ –∫ –≤–∞–º', '–ª–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']
            legal_keywords = ['–∑–∞–∫–æ–Ω', '–ø—Ä–∞–≤–æ', '—Å—É–¥', '–¥–æ–≥–æ–≤–æ—Ä', '–∏—Å–∫', '—Ä–∞–∑–≤–æ–¥', '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '—Ç—Ä—É–¥–æ–≤–æ–π', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π', '—É–≥–æ–ª–æ–≤–Ω—ã–π', '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π', '–∞–ª–∏–º–µ–Ω—Ç—ã', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—à—Ç—Ä–∞—Ñ', '–Ω–∞–ª–æ–≥', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ª–∏—Ü–µ–Ω–∑–∏—è', '–∞—Ä–µ–Ω–¥–∞', '–∫—É–ø–ª—è', '–ø—Ä–æ–¥–∞–∂–∞']
            
            # Only consider explicit appointment requests, not general contact questions
            asking_for_appointment = any(keyword in user_message.lower() for keyword in explicit_appointment_keywords)
            asking_legal_question = any(keyword in user_message.lower() for keyword in legal_keywords)
            
            # Determine conversation context
            conversation_context = "general"
            if asking_for_appointment:
                conversation_context = "appointment"
            elif asking_legal_question:
                conversation_context = "legal_consultation"
            
            # Update session with legal category if detected
            if asking_legal_question and not session.legal_category:
                # Try to determine specific legal category
                if any(word in user_message.lower() for word in ['—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '–±—Ä–∞–∫', '—Å–µ–º—å—è']):
                    session.legal_category = '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ'
                elif any(word in user_message.lower() for word in ['—Ä–∞–±–æ—Ç–∞', '—Ç—Ä—É–¥–æ–≤–æ–π', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ']):
                    session.legal_category = '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ'
                elif any(word in user_message.lower() for word in ['–¥–æ–≥–æ–≤–æ—Ä', '—Å–¥–µ–ª–∫–∞', '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞']):
                    session.legal_category = '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ'
                elif any(word in user_message.lower() for word in ['—à—Ç—Ä–∞—Ñ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ']):
                    session.legal_category = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ'
                elif any(word in user_message.lower() for word in ['–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–∑–∞–≤–µ—â–∞–Ω–∏–µ', '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫']):
                    session.legal_category = '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ'
                else:
                    session.legal_category = '–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
                session.save()
            
            # Prepare enhanced system prompt for DeepSeek
            system_prompt = f"""–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞ {lawyer.user.get_full_name()} –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∞–≤–∞ –ö–† –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –Æ–†–ò–°–¢–ï:
- –ò–º—è: {lawyer.user.get_full_name()}
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {lawyer.years_experience} –ª–µ—Ç
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {', '.join(lawyer.specialties) if lawyer.specialties else '–û–±—â–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'}
- –ö–æ–Ω—Ç–∞–∫—Ç—ã: {lawyer.user.email}
- –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º

–ì–õ–ê–í–ù–´–ô –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
–í–°–ï–ì–î–ê –°–ù–ê–ß–ê–õ–ê –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ô–¢–ï –ü–û–õ–ï–ó–ù–£–Æ –Æ–†–ò–î–ò–ß–ï–°–ö–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ò –°–û–í–ï–¢–´, –û–¢–í–ï–ß–ê–ô–¢–ï –ù–ê –í–û–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–û –ò –¢–û–õ–¨–ö–û –ü–û–¢–û–ú –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É.

–í–ê–®–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
1. –û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ê–ß–ê - –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ö–û–ù–°–£–õ–¨–¢–ò–†–û–í–ê–ù–ò–ï:
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±—ä—è—Å–Ω—è–π—Ç–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã –ö–† –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
   - –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   - –ü–û–î–†–û–ë–ù–û —Ä–∞–∑—ä—è—Å–Ω—è–π—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
   - –ü–æ–º–æ–≥–∞–π—Ç–µ —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)
   - –î–∞–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É, —Ç—Ä—É–¥–æ–≤–æ–º—É, –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∞–≤—É

2. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ú–û–©–¨:
   - –î–ï–¢–ê–õ–¨–ù–û –æ–±—ä—è—Å–Ω—è–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
   - –ö–û–ù–ö–†–ï–¢–ù–û —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ —Å—Ä–æ–∫–∞—Ö
   - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π—Ç–µ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
   - –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º–∏

3. –ó–ê–ü–ò–°–¨ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ (–¢–û–õ–¨–ö–û –ö–û–ì–î–ê –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –ù–ï–û–ë–•–û–î–ò–ú–û):
   - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –¢–û–õ–¨–ö–û –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª—É—á–∞—è—Ö:
     * –ù—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
     * –°–ª–æ–∂–Ω–æ–µ —Å—É–¥–µ–±–Ω–æ–µ –¥–µ–ª–æ —Ç—Ä–µ–±—É—é—â–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
     * –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –æ –≤—Å—Ç—Ä–µ—á–µ
     * –î–µ–ª–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ —Å—É–¥–µ
   - –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ä–∞–∑—É - —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
   - –û–±—ä—è—Å–Ω—è–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å—É
- –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ –ö–† –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
- –°–ù–ê–ß–ê–õ–ê –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∏—Ç–µ –æ–Ω–ª–∞–π–Ω, –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π—Ç–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤
- –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º –¥–µ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞

–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –ù–µ –¥–∞–≤–∞–π—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–≥–æ–ª–æ–≤–Ω—ã–º –¥–µ–ª–∞–º –±–µ–∑ –æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
- –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫ —é—Ä–∏—Å—Ç—É
- –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–π—Ç–µ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∏–∑—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–í–ê–ñ–ù–û: –í–∞—à–∞ —Ü–µ–ª—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –¥–∞—Ç—å –µ–º—É –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –í—Å—Ç—Ä–µ—á–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞."""

            # Call DeepSeek API
            try:
                response = self.get_ai_response(system_prompt, user_message, session)
                ai_message = response.get('content', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.')
                
                # Save AI response
                ChatMessage.objects.create(
                    session=session,
                    message_type='assistant', 
                    content=ai_message,
                    ai_model='deepseek-chat',
                    response_time_ms=response.get('response_time', 0),
                    tokens_used=response.get('tokens_used', 0)
                )
                
                # Check if we need to collect contact info - only for explicit appointment requests
                # Also ensure we've had at least a couple exchanges before suggesting appointments
                message_count = ChatMessage.objects.filter(session=session, message_type='user').count()
                should_collect_contact = (asking_for_appointment and not session.visitor_phone) or (
                    message_count >= 3 and '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in ai_message.lower() and not session.visitor_phone
                )
                
                response_data = {
                    'success': True,
                    'message': ai_message,
                    'should_collect_contact': should_collect_contact
                }
                
                if should_collect_contact:
                    response_data['contact_form'] = {
                        'title': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
                        'subtitle': f'–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ {lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏',
                        'fields': ['name', 'phone', 'email']
                    }
                
                return JsonResponse(response_data)
                
            except Exception as ai_error:
                # Check if it's an API key issue
                if "API key not configured" in str(ai_error):
                    fallback_message = """ü§ñ **AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á DeepSeek.

**–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**
1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/
2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: DEEPSEEK_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å
4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä

**–ü–æ–∫–∞ —á—Ç–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ —é—Ä–∏—Å—Ç—É.**"""
                else:
                    # Use simple rule-based fallback for common legal questions
                    fallback_message = self.get_simple_legal_response(user_message, lawyer)
                
                ChatMessage.objects.create(
                    session=session,
                    message_type='assistant',
                    content=fallback_message,
                    ai_model='fallback'
                )
                
                return JsonResponse({
                    'success': True,
                    'message': fallback_message,
                    'should_collect_contact': True,
                    'contact_form': {
                        'title': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
                        'subtitle': f'–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ {lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏',
                        'fields': ['name', 'phone', 'email']
                    }
                })
                
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)
    
    def get_ai_response(self, system_prompt, user_message, session):
        """Get response from DeepSeek API"""
        start_time = datetime.now()
        
        # Check if API key is configured
        if not settings.DEEPSEEK_API_KEY:
            raise Exception("DeepSeek API key not configured. Please set DEEPSEEK_API_KEY environment variable.")
        
        headers = {
            'Authorization': f'Bearer {settings.DEEPSEEK_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        # Get conversation history for context
        recent_messages = ChatMessage.objects.filter(
            session=session
        ).order_by('-created_at')[:6]  # Last 6 messages for context
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for msg in reversed(recent_messages):
            if msg.message_type == 'user':
                messages.append({'role': 'user', 'content': msg.content})
            elif msg.message_type == 'assistant' and msg.ai_model != 'system':
                messages.append({'role': 'assistant', 'content': msg.content})
        
        # Add current user message
        messages.append({'role': 'user', 'content': user_message})
        
        payload = {
            'model': 'deepseek-chat',
            'messages': messages,
            'max_tokens': 300,
            'temperature': 0.7,
            'stream': False
        }
        
        try:
            response = requests.post(
                settings.DEEPSEEK_API_URL,
                headers=headers,
                json=payload,
                timeout=30  # Increased timeout
            )
            
            response.raise_for_status()
            result = response.json()
            
            end_time = datetime.now()
            response_time = int((end_time - start_time).total_seconds() * 1000)
            
            return {
                'content': result['choices'][0]['message']['content'],
                'response_time': response_time,
                'tokens_used': result.get('usage', {}).get('total_tokens', 0)
            }
            
        except Exception as e:
            print(f"DeepSeek API Error: {str(e)}")  # Debug logging
            print(f"Response status: {getattr(response, 'status_code', 'N/A')}")
            print(f"Response text: {getattr(response, 'text', 'N/A')[:500]}")
            raise Exception(f"DeepSeek API error: {str(e)}")
    
    def get_simple_legal_response(self, user_message, lawyer):
        """Simple rule-based responses for common legal questions when AI is unavailable"""
        message_lower = user_message.lower()
        
        # Contract/Agreement related
        if any(word in message_lower for word in ['–¥–æ–≥–æ–≤–æ—Ä', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '–∞—Ä–µ–Ω–¥–∞', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ']):
            return f"""üìÑ **–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ–≥–æ–≤–æ—Ä–æ–≤:**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–≥–æ–≤–æ—Ä–∞–º –≤ –ö–†:**
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–∏—Å—å–º–µ–Ω–Ω–æ
‚Ä¢ –£–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
‚Ä¢ –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω –∏ –¥–∞—Ç–∞
‚Ä¢ –î–ª—è –∞—Ä–µ–Ω–¥—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–µ

**–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**
‚úÖ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω
‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –∞—Ä–µ–Ω–¥—É–µ—Ç–µ/–ø–æ–∫—É–ø–∞–µ—Ç–µ)
‚úÖ –¶–µ–Ω–∞ –∏ —Å—Ä–æ–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω

‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥—É—é**: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∂–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä —é—Ä–∏—Å—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º!

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ {lawyer.user.get_full_name()}? –°—Ç–æ–∏–º–æ—Å—Ç—å: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º"""

        # Divorce/Family law
        elif any(word in message_lower for word in ['—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '–±—Ä–∞–∫', '—Å–µ–º–µ–π–Ω']):
            return f"""üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ü–æ —Å–µ–º–µ–π–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:**

**–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–≤–æ–¥–∞ –≤ –ö–†:**
‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –ó–ê–ì–° (–ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏) –∏–ª–∏ —Å—É–¥
‚Ä¢ –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: 1 –º–µ—Å—è—Ü –≤ –ó–ê–ì–°–µ, 2-6 –º–µ—Å—è—Ü–µ–≤ –≤ —Å—É–¥–µ
‚Ä¢ –ì–æ—Å–ø–æ—à–ª–∏–Ω–∞: –æ—Ç 500 –¥–æ 2000 —Å–æ–º

**–ê–ª–∏–º–µ–Ω—Ç—ã:**
‚Ä¢ –ù–∞ —Ä–µ–±–µ–Ω–∫–∞: 25% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ 1 —Ä–µ–±–µ–Ω–∫–∞, 33% –Ω–∞ 2 –¥–µ—Ç–µ–π
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 30% –æ—Ç –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
‚Ä¢ –í–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥ –∏ —Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–≤

**–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞:**
üìã –ü–∞—Å–ø–æ—Ä—Ç–∞ —Å—É–ø—Ä—É–≥–æ–≤
üìã –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –±—Ä–∞–∫–µ  
üìã –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –¥–µ—Ç–µ–π
üìã —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö (–¥–ª—è –∞–ª–∏–º–µ–Ω—Ç–æ–≤)

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å {lawyer.user.get_full_name()}."""

        # Labor law
        elif any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '—Ç—Ä—É–¥–æ–≤', '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '–∑–∞—Ä–ø–ª–∞—Ç–∞']):
            return f"""üíº **–ü–æ —Ç—Ä—É–¥–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:**

**–í–∞—à–∏ –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:**
‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–µ —Ä–µ–∂–µ 2 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
‚Ä¢ –û—Ç–ø—É—Å–∫ 21 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å –≤ –≥–æ–¥—É
‚Ä¢ –ë–æ–ª—å–Ω–∏—á–Ω—ã–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è

**–ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏:**
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ (–ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
‚Ä¢ –í—ã–ø–ª–∞—Ç–∞ –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π
‚Ä¢ –í—ã–¥–∞—á–∞ —Ç—Ä—É–¥–æ–≤–æ–π –∫–Ω–∏–∂–∫–∏

**–ù–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:**
‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã - —à—Ç—Ä–∞—Ñ –¥–æ 100,000 —Å–æ–º
‚ö†Ô∏è –ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥
‚ö†Ô∏è –û—Ç–∫–∞–∑ –≤ –æ—Ç–ø—É—Å–∫–µ - –∂–∞–ª–æ–±–∞ –≤ —Ç—Ä—É–¥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ {lawyer.user.get_full_name()}!"""

        # Real estate
        elif any(word in message_lower for word in ['–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–ø—Ä–æ–¥–∞–∂–∞', '–ø–æ–∫—É–ø–∫–∞']):
            return f"""üè† **–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:**

**–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:**
‚úÖ –ü—Ä–∞–≤–æ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚úÖ –í—ã–ø–∏—Å–∫—É –∏–∑ –ì–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
‚úÖ –°–ø—Ä–∞–≤–∫—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ–ª–≥–æ–≤
‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å—É–ø—Ä—É–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚úÖ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É

**–≠—Ç–∞–ø—ã —Å–¥–µ–ª–∫–∏:**
1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä + –∑–∞–¥–∞—Ç–æ–∫
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —é—Ä–∏—Å—Ç–æ–º
3. –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏
4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ì–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–µ
5. –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª—é—á–µ–π

**–ì–æ—Å–ø–æ—à–ª–∏–Ω—ã:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∞: 0.1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–º–∏–Ω. 1000 —Å–æ–º)
‚Ä¢ –ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ: 0.5% –æ—Ç —Å—É–º–º—ã

‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∏—Ç–µ —é—Ä–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {lawyer.user.get_full_name()}: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º"""

        # Default response
        else:
            return f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! 

ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é), –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
‚Ä¢ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ (—Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã)
‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã
‚Ä¢ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ {lawyer.user.get_full_name()}:

üìß Email: {lawyer.user.email}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É?"""


@method_decorator(csrf_exempt, name='dispatch')
class SubmitContactAPIView(View):
    """Handle contact form submission and create lead"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            session_id = data.get('session_id')
            name = data.get('name', '').strip()
            phone = data.get('phone', '').strip()
            email = data.get('email', '').strip()
            
            if not all([session_id, name, phone]):
                return JsonResponse({'success': False, 'error': 'Name and phone are required'})
            
            # Get chat session
            session = get_object_or_404(ChatSession, session_id=session_id)
            lawyer = session.lawyer
            
            # Update session with contact info
            session.visitor_name = name
            session.visitor_phone = phone
            session.visitor_email = email
            session.consultation_requested = True
            session.save()
            
            # Create lead
            lead = Lead.objects.create(
                lawyer=lawyer,
                name=name,
                phone=phone,
                email=email,
                legal_category='–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
                case_description=f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç. –°–µ—Å—Å–∏—è: {session_id}',
                source='website_chat',
                status='new',
                priority='medium',
                ip_address=request.META.get('REMOTE_ADDR', ''),
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                referrer=request.META.get('HTTP_REFERER', '')
            )
            
            # Send confirmation message
            confirmation_message = f"""–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

üë§ –ò–º—è: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üìß Email: {email}

{lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.

–û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-18:00).

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"""
            
            ChatMessage.objects.create(
                session=session,
                message_type='assistant',
                content=confirmation_message,
                ai_model='system'
            )
            
            return JsonResponse({
                'success': True,
                'message': confirmation_message,
                'lead_created': True
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)


@method_decorator(csrf_exempt, name='dispatch')
class ScheduleAppointmentAPIView(View):
    """Handle appointment scheduling from chat"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            session_id = data.get('session_id')
            appointment_time = data.get('appointment_time')
            appointment_date = data.get('appointment_date')
            consultation_type = data.get('consultation_type', 'general')
            
            if not all([session_id, appointment_time, appointment_date]):
                return JsonResponse({'success': False, 'error': 'Session ID, time and date are required'})
            
            # Get chat session
            session = get_object_or_404(ChatSession, session_id=session_id)
            lawyer = session.lawyer
            
            # Import here to avoid circular imports
            from leads.models import Consultation
            from datetime import datetime
            
            # Parse appointment datetime
            appointment_datetime_str = f"{appointment_date} {appointment_time}"
            try:
                appointment_datetime = datetime.strptime(appointment_datetime_str, "%Y-%m-%d %H:%M")
            except ValueError:
                return JsonResponse({'success': False, 'error': 'Invalid date/time format'})
            
            # Create or get lead from session
            if session.visitor_phone and session.visitor_name:
                # Try to find existing lead or create new one
                from leads.models import Lead
                lead, created = Lead.objects.get_or_create(
                    lawyer=lawyer,
                    phone=session.visitor_phone,
                    defaults={
                        'name': session.visitor_name,
                        'email': session.visitor_email or '',
                        'legal_category': session.legal_category or '–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
                        'case_description': f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç. –°–µ—Å—Å–∏—è: {session_id}',
                        'source': 'website_chat',
                        'status': 'new',
                        'priority': 'medium',
                        'ip_address': request.META.get('REMOTE_ADDR', ''),
                        'user_agent': request.META.get('HTTP_USER_AGENT', ''),
                        'referrer': request.META.get('HTTP_REFERER', '')
                    }
                )
                
                # Create consultation appointment
                consultation = Consultation.objects.create(
                    lawyer=lawyer,
                    lead=lead,
                    scheduled_time=appointment_datetime,
                    duration_minutes=60,  # Default 1 hour
                    consultation_type=consultation_type,
                    meeting_method='in_person',  # Default
                    status='scheduled',
                    agenda=f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å—É: {session.legal_category or "–û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"}',
                    notes=f'–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç. –°–µ—Å—Å–∏—è: {session_id}'
                )
                
                # Update session
                session.consultation_requested = True
                session.save()
                
                # Send confirmation message
                confirmation_message = f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.

üìÖ –î–∞—Ç–∞: {appointment_datetime.strftime('%d.%m.%Y')}
üïê –í—Ä–µ–º—è: {appointment_datetime.strftime('%H:%M')}
üë§ –ö–ª–∏–µ–Ω—Ç: {session.visitor_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {session.visitor_phone}
üìß Email: {session.visitor_email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚öñÔ∏è –¢–µ–º–∞: {session.legal_category or '–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'}

{lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–∞ –¥–µ–Ω—å –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –æ—Ñ–∏—Å–µ —é—Ä–∏—Å—Ç–∞. –ê–¥—Ä–µ—Å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.

–î–æ –≤—Å—Ç—Ä–µ—á–∏! ü§ù"""
                
                ChatMessage.objects.create(
                    session=session,
                    message_type='assistant',
                    content=confirmation_message,
                    ai_model='system'
                )
                
                return JsonResponse({
                    'success': True,
                    'message': confirmation_message,
                    'appointment_id': consultation.id,
                    'appointment_details': {
                        'date': appointment_datetime.strftime('%d.%m.%Y'),
                        'time': appointment_datetime.strftime('%H:%M'),
                        'lawyer': lawyer.user.get_full_name(),
                        'client': session.visitor_name,
                        'phone': session.visitor_phone,
                        'category': session.legal_category
                    }
                })
            else:
                return JsonResponse({
                    'success': False, 
                    'error': 'Contact information required. Please provide name and phone number first.'
                })
                
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)


class GetChatHistoryAPIView(View):
    """Get chat history for a session"""
    
    def get(self, request):
        session_id = request.GET.get('session_id')
        if not session_id:
            return JsonResponse({'success': False, 'error': 'Session ID required'})
        
        try:
            session = get_object_or_404(ChatSession, session_id=session_id)
            messages = ChatMessage.objects.filter(session=session).order_by('created_at')
            
            message_data = []
            for msg in messages:
                message_data.append({
                    'type': msg.message_type,
                    'content': msg.content,
                    'timestamp': msg.created_at.isoformat()
                })
            
            return JsonResponse({
                'success': True,
                'messages': message_data,
                'session_info': {
                    'lawyer_name': session.lawyer.user.get_full_name(),
                    'status': session.status,
                    'visitor_name': session.visitor_name,
                    'visitor_phone': session.visitor_phone,
                    'legal_category': session.legal_category
                }
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400) 