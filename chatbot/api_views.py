from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from django.shortcuts import get_object_or_404
from django.conf import settings
import json
import requests
import uuid
from datetime import datetime
from lawyers.models import Lawyer
from leads.models import Lead
from .models import ChatSession, ChatMessage


@method_decorator(csrf_exempt, name='dispatch')
class StartChatAPIView(View):
    """Initialize a new chat session with a lawyer's AI assistant"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            lawyer_slug = data.get('lawyer_slug')
            visitor_name = data.get('visitor_name', 'Anonymous')
            
            # Get lawyer
            lawyer = get_object_or_404(Lawyer, domain_slug=lawyer_slug)
            
            # Create chat session
            session = ChatSession.objects.create(
                lawyer=lawyer,
                session_id=str(uuid.uuid4()),
                visitor_info={'name': visitor_name},
                status='active',
                language='ru',  # Default to Russian
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                referrer=request.META.get('HTTP_REFERER', '')
            )
            
            # Welcome message
            welcome_message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞ {lawyer.user.get_full_name()}. 

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
üî∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
üî∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö 
üî∏ –ó–∞–ø–∏—Å—å—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —Å —é—Ä–∏—Å—Ç–æ–º
üî∏ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –≤–∞—à–µ–≥–æ –¥–µ–ª–∞

–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
            
            # Save welcome message
            ChatMessage.objects.create(
                session=session,
                message_type='assistant',
                content=welcome_message,
                ai_model='system'
            )
            
            return JsonResponse({
                'success': True,
                'session_id': session.session_id,
                'message': welcome_message,
                'lawyer_name': lawyer.user.get_full_name()
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)


@method_decorator(csrf_exempt, name='dispatch')
class SendMessageAPIView(View):
    """Send message to AI and get response"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            session_id = data.get('session_id')
            user_message = data.get('message', '').strip()
            
            if not user_message:
                return JsonResponse({'success': False, 'error': 'Message is required'})
            
            # Get chat session
            session = get_object_or_404(ChatSession, session_id=session_id)
            lawyer = session.lawyer
            
            # Save user message
            user_chat_message = ChatMessage.objects.create(
                session=session,
                message_type='user',
                content=user_message
            )
            
            # Check if user is asking for contact/meeting
            contact_keywords = ['–≤—Å—Ç—Ä–µ—á–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–Ω—Ç–∞–∫—Ç', '–∞–¥—Ä–µ—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']
            asking_for_contact = any(keyword in user_message.lower() for keyword in contact_keywords)
            
            # Prepare system prompt for DeepSeek
            system_prompt = f"""–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —é—Ä–∏—Å—Ç–∞ {lawyer.user.get_full_name()} –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –Æ–†–ò–°–¢–ï:
- –ò–º—è: {lawyer.user.get_full_name()}
- –û–ø—ã—Ç: {lawyer.years_experience} –ª–µ—Ç
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {', '.join(lawyer.specialties) if lawyer.specialties else '–û–±—â–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'}
- –¢–µ–ª–µ—Ñ–æ–Ω: {lawyer.phone}
- Email: {lawyer.user.email}
- –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º

–ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ–±—â—É—é –ø—Ä–∞–≤–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
3. –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
4. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
5. –ë—É–¥—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
6. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —é—Ä–∏—Å—Ç–æ–º

–¶–ï–õ–¨: –ü–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ —é—Ä–∏—Å—Ç—É."""

            # Call DeepSeek API
            try:
                response = self.get_ai_response(system_prompt, user_message, session)
                ai_message = response.get('content', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.')
                
                # Save AI response
                ChatMessage.objects.create(
                    session=session,
                    message_type='assistant', 
                    content=ai_message,
                    ai_model='deepseek-chat',
                    response_time_ms=response.get('response_time', 0),
                    tokens_used=response.get('tokens_used', 0)
                )
                
                # Check if we need to collect contact info
                should_collect_contact = asking_for_contact and not session.visitor_info.get('phone')
                
                response_data = {
                    'success': True,
                    'message': ai_message,
                    'should_collect_contact': should_collect_contact
                }
                
                if should_collect_contact:
                    response_data['contact_form'] = {
                        'title': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
                        'subtitle': f'–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ {lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏',
                        'fields': ['name', 'phone', 'email']
                    }
                
                return JsonResponse(response_data)
                
            except Exception as ai_error:
                # Fallback response if AI fails
                fallback_message = f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! 

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ {lawyer.user.get_full_name()} –Ω–∞–ø—Ä—è–º—É—é:

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {lawyer.phone}
üìß Email: {lawyer.user.email}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lawyer.consultation_fee if lawyer.consultation_fee > 0 else '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ'} —Å–æ–º

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É?"""
                
                ChatMessage.objects.create(
                    session=session,
                    message_type='assistant',
                    content=fallback_message,
                    ai_model='fallback'
                )
                
                return JsonResponse({
                    'success': True,
                    'message': fallback_message,
                    'should_collect_contact': True,
                    'contact_form': {
                        'title': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
                        'subtitle': f'–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏ {lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏',
                        'fields': ['name', 'phone', 'email']
                    }
                })
                
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)
    
    def get_ai_response(self, system_prompt, user_message, session):
        """Get response from DeepSeek API"""
        start_time = datetime.now()
        
        headers = {
            'Authorization': f'Bearer {settings.DEEPSEEK_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        # Get conversation history for context
        recent_messages = ChatMessage.objects.filter(
            session=session
        ).order_by('-created_at')[:6]  # Last 6 messages for context
        
        messages = [{'role': 'system', 'content': system_prompt}]
        
        for msg in reversed(recent_messages):
            if msg.message_type == 'user':
                messages.append({'role': 'user', 'content': msg.content})
            elif msg.message_type == 'assistant' and msg.ai_model != 'system':
                messages.append({'role': 'assistant', 'content': msg.content})
        
        # Add current user message
        messages.append({'role': 'user', 'content': user_message})
        
        payload = {
            'model': 'deepseek-chat',
            'messages': messages,
            'max_tokens': 300,
            'temperature': 0.7,
            'stream': False
        }
        
        try:
            response = requests.post(
                settings.DEEPSEEK_API_URL,
                headers=headers,
                json=payload,
                timeout=10
            )
            
            response.raise_for_status()
            result = response.json()
            
            end_time = datetime.now()
            response_time = int((end_time - start_time).total_seconds() * 1000)
            
            return {
                'content': result['choices'][0]['message']['content'],
                'response_time': response_time,
                'tokens_used': result.get('usage', {}).get('total_tokens', 0)
            }
            
        except Exception as e:
            raise Exception(f"DeepSeek API error: {str(e)}")


@method_decorator(csrf_exempt, name='dispatch')
class SubmitContactAPIView(View):
    """Handle contact form submission and create lead"""
    
    def post(self, request):
        try:
            data = json.loads(request.body)
            session_id = data.get('session_id')
            name = data.get('name', '').strip()
            phone = data.get('phone', '').strip()
            email = data.get('email', '').strip()
            
            if not all([session_id, name, phone]):
                return JsonResponse({'success': False, 'error': 'Name and phone are required'})
            
            # Get chat session
            session = get_object_or_404(ChatSession, session_id=session_id)
            lawyer = session.lawyer
            
            # Update session with contact info
            session.visitor_info.update({
                'name': name,
                'phone': phone,
                'email': email
            })
            session.consultation_requested = True
            session.save()
            
            # Create lead
            lead = Lead.objects.create(
                lawyer=lawyer,
                name=name,
                phone=phone,
                email=email,
                legal_category='–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
                case_description=f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç. –°–µ—Å—Å–∏—è: {session_id}',
                source='website_chat',
                status='new',
                priority='medium',
                ip_address=request.META.get('REMOTE_ADDR', ''),
                user_agent=request.META.get('HTTP_USER_AGENT', ''),
                referrer=request.META.get('HTTP_REFERER', '')
            )
            
            # Send confirmation message
            confirmation_message = f"""–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

üë§ –ò–º—è: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üìß Email: {email}

{lawyer.user.get_full_name()} —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏.

–û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-18:00).

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"""
            
            ChatMessage.objects.create(
                session=session,
                message_type='assistant',
                content=confirmation_message,
                ai_model='system'
            )
            
            return JsonResponse({
                'success': True,
                'message': confirmation_message,
                'lead_created': True
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)


class GetChatHistoryAPIView(View):
    """Get chat history for a session"""
    
    def get(self, request):
        session_id = request.GET.get('session_id')
        if not session_id:
            return JsonResponse({'success': False, 'error': 'Session ID required'})
        
        try:
            session = get_object_or_404(ChatSession, session_id=session_id)
            messages = ChatMessage.objects.filter(session=session).order_by('created_at')
            
            message_data = []
            for msg in messages:
                message_data.append({
                    'type': msg.message_type,
                    'content': msg.content,
                    'timestamp': msg.created_at.isoformat()
                })
            
            return JsonResponse({
                'success': True,
                'messages': message_data,
                'session_info': {
                    'lawyer_name': session.lawyer.user.get_full_name(),
                    'status': session.status
                }
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400) 